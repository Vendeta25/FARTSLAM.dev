@{
    ViewData["Title"] = "Home Page";
}
<style>
    attrButton {
        margin-left: 0px;
        margin-right: 0px;
        padding-left: 0px;
        padding-right: 0px
    }
</style>
<head>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>

   
</head>
<nav class="navbar navbar-expand-lg navbar-light bg-light">

    <button type="button" id="sidebarCollapse" style="color: black; background-color: none; margin-right: 30px;" class="btn btn-light">
        <i class="fas fa-align-left"></i>
    </button>
    <div class="navbar-brand" href="#">Player Finder</div>
    <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarTogglerDemo02" aria-controls="navbarTogglerDemo02" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarTogglerDemo02">
        
        <form class="form-inline my-2 my-lg-0 mx-2">                        
                @Html.DropDownList("dropDownYears", Enumerable.Empty<SelectListItem>(), new { @class = "form-control nav-option mx-5", @onchange = "statGrapher.getTeamsList(this.value)", @datatoggle = "tooltip", @dataplacement = "top", @title = "Season a player played in" })
                @Html.DropDownList("dropDownTeams", Enumerable.Empty<SelectListItem>(), "...Team...", new { @class = "form-control nav-option mx-5", @onchange = "statGrapher.getPlayersList(this.value)", @datatoggle = "tooltip", @dataplacement = "top", @title = "Team the player played on for selected season." })
                @Html.DropDownList("dropDownPlayers", Enumerable.Empty<SelectListItem>(), "...Player...", new { @class = "form-control mx-5", @onchange = "statGrapher.toggleAddActive()", @datatoggle = "tooltip", @dataplacement = "top", @title = "Players on selected team" })
            <button id="btnAddPlayer" class="btn btn-primary" onclick="statGrapher.getPlayerData($('#dropDownPlayers').val())" disabled>Add</button>
        </form>
    </div>
    
</nav>
                        

                   

<div class="wrapperInner" id="innerWrapper">

    <!-- Sidebar -->
    <nav id="sidebarInner">
        
        <ul class="list-unstyled components" style="padding-top:0px;">
            <li class="active">
                <a href="#playersList" id="playersListClick" data-toggle="collapse" aria-expanded="true" class="dropdown-toggle show">Players</a>
                <ul class="collapse list-unstyled show" id="playersList" style="border-bottom: 1px solid #e5e5e5;">
                </ul>
            </li>
            <li><sidebarHeader>Graph Options</sidebarHeader></li>
            <li class="active">
                <a href="#attrControls" data-toggle="collapse" aria-expanded="true" class="dropdown-toggle">Attributes</a>
                <ul class="collapse list-unstyled show" id="attrControls">
                    <li>
                        <a id="attrButton0" class="active" onclick="statGrapher.switchAttribute(0)">Average</a>
                    </li>
                    <li>
                        <a id="attrButton1" onclick="statGrapher.switchAttribute(1)">On Base %</a>
                    </li>
                    <li>
                        <a id="attrButton2" onclick="statGrapher.switchAttribute(2)">Slugging %</a>
                    </li>
                    <li>
                        <a id="attrButton3" onclick="statGrapher.switchAttribute(3)">OPS</a>
                    </li>
                    <li>
                        <a id="attrButton4" onclick="statGrapher.switchAttribute(4)">Hits</a>
                    </li>
                    <li>
                        <a id="attrButton5" onclick="statGrapher.switchAttribute(5)">Home Runs</a>
                    </li>
                    <li>
                        <a id="attrButton6" onclick="statGrapher.switchAttribute(6)">At Bats</a>
                    </li>
                    <li>
                        <a id="attrButton7" onclick="statGrapher.switchAttribute(7)">Walks</a>
                    </li>
                    <li>
                        <a id="attrButton8" onclick="statGrapher.switchAttribute(8)">IBB</a>
                    </li>
                    <li>
                        <a id="attrButton9" onclick="statGrapher.switchAttribute(9)">HBP</a>
                    </li>


                </ul>
            </li>
            <li class="active">
                <a href="#modeControls" data-toggle="collapse" aria-expanded="false" class="dropdown-toggle">Graph By</a>
                <ul class="collapse list-unstyled" id="modeControls">
                    <li>
                        <a id="modeButton0" class="active" onclick="statGrapher.switchMode(0)">Season</a>
                    </li>
                    <li>
                        <a id="modeButton1" onclick="statGrapher.switchMode(1)">Years in Majors</a>
                    </li>
                </ul>
            </li>
        </ul>
    </nav>

    <!-- Page Content -->
    <div id="content">
        <div class="container">
            <main role="main" class="pb-3" style="padding:30px;">
                <div class="text-center">
                    <canvas max-height="3000" width="1500" id="graphCanvas"></canvas>
                </div>
            </main>
        </div>
    </div>

</div>





<script>
    var ctx = $("#graphCanvas");
    $("#areaSelector").bind("change", function () {
        getData($("#areaSelector").val());
    });
    var CHART = new Chart(ctx, {
        type: 'scatter',
        responsive: true,
        data: {
            datasets: []
        },
        options: {}
    });

    var statGrapher = {

        data: [],
        colors: [["rgba(173,221,142,.5)", "rgba(49,163,84,1)", "rgba(247,252,185, 1)"], ["rgba(49,130,189,.5)", "rgba(158,202,225,1)", "rgba(222,235,247,1)"], ["rgba(230,85,13,.5)", "rgba(253,174,107,1)", "rgba(254,230,206,1)"]],
        hittersAttributes: ["battingAverage", "onBasePercentage", "sluggingPercentage", "onBasePlus", "hits", "homeRuns", "atBats", "walks", "intentionalWalks", "hitByPitch"],
        modes: ["season", "year"],
        attrIndex: 0,
        modeIndex: 0,
        maxPlayers: 3,
        getTeamsList: function (year) {
            $.ajax({
                type: "GET",
                url: "Home/GetTeamsForYear",
                data: { year: year },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    $("#dropDownTeams").empty();
                    $("#dropDownTeams").append($('<option></option>').text("...Teams...").val("0"));
                    $("#dropDownPlayers").empty();
                    $("#dropDownPlayers").append($('<option></option>').text("...Players...").val("0"));
                    statGrapher.toggleAddActive();
                    $.each(response, function (i, item) {
                        $("#dropDownTeams").append($('<option></option>').text(item.text).val(item.value));
                    });
                },
                error: function () { alert("Error: failed to get teams") }
            });
        },

        getPlayersList: function (id) {
            var year = $("#dropDownYears option:selected").val();
            $.ajax({
                type: "GET",
                url: "Home/GetHittersForTeam",
                data: { teamId: id, year: year },
                contentType: "application/json; charset=utf-8",
                dataType: "json",
                success: function (response) {
                    $("#dropDownPlayers").empty();
                    $("#dropDownPlayers").append($('<option></option>').text("...Players...").val("0"));
                    statGrapher.toggleAddActive();
                    $.each(response, function (i, item) {
                        $("#dropDownPlayers").append($('<option></option>').text(item.text).val(item.value));
                    });
                },
                error: function () { alert("Error: failed to get players list") }
            });
        },

        getPlayerData: function (id) {
            var name = $("#dropDownPlayers option:selected").text();

            $('#btnAddPlayer').attr('disabled', 'disabled');
            setTimeout(1000);
            if (statGrapher.data.length < statGrapher.maxPlayers) {

                $.ajax({
                    type: "GET",
                    url: "Home/GetHitterData",
                    data: { playerId: id },
                    contentType: "application/json; charset=utf-8",
                    dataType: "json",
                    success: function (response) {
                        statGrapher.data.push({ name, response });
                        statGrapher.graphData(statGrapher.hittersAttributes[statGrapher.attrIndex], statGrapher.modes[statGrapher.modeIndex]);
                        var newRow = "<li><item><player>" + name + "</player><btnPlayer class='btn-danger' onclick='statGrapher.removeData(this)'>X</btnPlayer></item></li>";
                        $("#playersList").append(newRow);
                        statGrapher.toggleAddActive();

                    },
                    error: function () { alert("Error: failed to add player") }
                });
            }

        },

        graphData: function (attribute, mode) {
            CHART.destroy();
            CHART = new Chart(ctx, {
                type: 'scatter',
                responsive: true,
                data: {
                    datasets: []
                },
                options: {
                    tooltips: {
                        callbacks: {
                            title: function (tooltipItem, data) {
                                var name = statGrapher.data[tooltipItem[0].datasetIndex].name;
                                return name;
                            },
                            label: function (tooltipItem, data) {
                                var stat = tooltipItem.yLabel.toString();
                                return stat;
                            },
                            afterTitle: function (tooltipItem, data) {
                                var team = statGrapher.data[tooltipItem[0].datasetIndex].response[tooltipItem[0].index]["team_short"].split(" ");
                                return team;
                            }
                        },
                    }
                }
            });
            for (i = 0; i < statGrapher.data.length; i++) {
                newSet =
                {
                    label: statGrapher.data[i].name,
                    fill: true,
                    borderColor: statGrapher.colors[i][1],
                    backgroundColor: statGrapher.colors[i][0],
                    pointBackgroundColor: statGrapher.colors[i][2],
                    showLine: true,
                    data: [],
                    options: {
                        scales: {
                            xAxes: [{
                                type: "linear",

                                ticks: {
                                    stepSize: 1
                                }
                            }],
                            yAxes: [{

                            }]
                        },


                    }
                };

                for (j = 0; j < statGrapher.data[i].response.length; j++) {
                    switch (mode) {
                        case "season":
                            newSet.data.push({ y: statGrapher.data[i].response[j][attribute], x: statGrapher.data[i].response[j]["season"] });
                            CHART.options.scales.xAxes[0].scaleLabel.labelString = "Season";
                            break;

                        case "year":
                            newSet.data.push({ y: statGrapher.data[i].response[j][attribute], x: j });
                            CHART.options.scales.xAxes[0].scaleLabel.labelString = "Years in League";
                            break;
                    }
                }
                CHART.options.scales.xAxes[0].scaleLabel.display = true;
                CHART.options.scales.yAxes[0].scaleLabel.display = true;

                CHART.options.scales.yAxes[0].scaleLabel.labelString = statGrapher.hittersAttributes[statGrapher.attrIndex].toUpperCase();



                CHART.data.datasets.push(newSet);

            }

            CHART.update();
        },

        removeData: function (e) {

            statGrapher.data.splice($(this).index() - 1, 1);
            e.closest('li').remove();
            statGrapher.graphData(statGrapher.hittersAttributes[statGrapher.attrIndex], statGrapher.modes[statGrapher.modeIndex]);
            statGrapher.toggleAddActive();
        },
        switchAttribute: function (i) {
            if (i != statGrapher.attrIndex) {
                $("#attrButton" + i).addClass("active");
                $("#attrButton" + statGrapher.attrIndex).removeClass("active");
                statGrapher.attrIndex = i;
                statGrapher.graphData(statGrapher.hittersAttributes[i], statGrapher.modes[statGrapher.modeIndex]);
            }
        },
        switchMode: function (i) {
            if (i != statGrapher.modeIndex) {
                $("#modeButton" + i).addClass("active");
                $("#modeButton" + statGrapher.modeIndex).removeClass("active");
                statGrapher.modeIndex = i;
                statGrapher.graphData(statGrapher.hittersAttributes[statGrapher.attrIndex], statGrapher.modes[i]);
            }
        },
        toggleAddActive: function () {
            var playerSelected = $("#dropDownPlayers option:selected").val() != 0;
            if (statGrapher.data.length < statGrapher.maxPlayers && playerSelected) {
                $("#btnAddPlayer").prop('disabled', false);
            } else {
                $("#btnAddPlayer").prop('disabled', true);

            }
        }

    }


    $(document).ready(function () {
        $("#dropDownYears").append($('<option></option>').text("...Year...").val(0));
        for (var i = 2020; i >= 1900; i--) {
            $("#dropDownYears").append($('<option></option>').text(i).val(i));
        }
    })
</script>
